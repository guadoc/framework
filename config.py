import argparse
def init_config():
    parser = argparse.ArgumentParser(description='Framework for machine learning with Tensor Flow', formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('-mp', '--model_path', default='models', help='model folder, must contain __init__ file')
    #parser.add_argument('-c', '--checkpoint', action='store_true', help='enable interaction after each training epoch')
    parser.add_argument('-m', '--model', default='baseline', help='model file')
    #parser.add_argument('-o', '--output-mode', action='store_true', help='enter describe mode')
    #parser.add_argument('-op', '--optimizer', default=1, metavar='I', type=int, nargs='?', help='1 = ADAM, 2 = Nesterov')
    #parser.add_argument('-bs', '--batch-size', default=10, metavar='I', type=int, nargs='?', help='number of images per batch')
    #parser.add_argument('-to', '--timeout-milliseconds', default=10000, metavar='I', type=int, nargs='?', help='timeout for each operation, in milliseconds')
    #parser.add_argument('-te', '--training-epochs', default=100, metavar='I', type=int, nargs='?', help='number of training epochs')
    #parser.add_argument('-tt', '--training-threads', default=1, metavar='I', type=int, nargs='?', help='number of enqueuing threads for training preprocessing')
    #parser.add_argument('-vt', '--validation-threads', default=1, metavar='I', type=int, nargs='?', help='number of enqueuing threads for validation preprocessing')
    #parser.add_argument('-pb', '--performance-batchs', metavar='I', type=int, nargs='?', help='batchs before printing performance stats of the training', default=100)
    #parser.add_argument('-ve', '--validation-epochs', metavar='I', type=int, nargs='?', help='epochs before validating the model', default=1)
    #parser.add_argument('-lr', '--learning-rate', default=0.001, metavar='F', type=float, nargs='?', help='initial learning rate')
    #parser.add_argument('-dr', '--dropout-rate', metavar='F', type=float, nargs='?', help='dropout rate', default=0.75)
    #parser.add_argument('-ff', '--feature-folder', metavar='folder_name', nargs='?', help='name of the folder with features to mimic', default='feat_dr_1')
    #parser.add_argument('-tf', '--train-file', metavar='train_filename', nargs='?', help='name of the file containing the list of training images', default='train')
    #parser.add_argument('-vf', '--validation-file', metavar='validation_filename', nargs='?', help='name of the file containing the list of training images', default='val')
    #parser.add_argument('-pi', '--probe-image-name', metavar='probe_image_name', nargs='?', help='name of one image which is going to be used to retrieve information about the descriptors', default='000001')
    #parser.add_argument('-en', '--experiment-name', metavar='experiment_name', nargs='?', help='name of the experiment, used in checkpoints and logs', default='exp')
    #parser.add_argument('-load', '--load-model', metavar='model_filename', type=str, nargs='?', help='preload a model to continue training')
    args = parser.parse_args()
    return args
